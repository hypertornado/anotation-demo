// Generated by CoffeeScript 1.6.3
var Start,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Start = (function() {
  function Start() {
    this.sample_data = __bind(this.sample_data, this);
    this.create_sign = __bind(this.create_sign, this);
    this.draw = __bind(this.draw, this);
    this.add_group = __bind(this.add_group, this);
    this.add = __bind(this.add, this);
    this.move = __bind(this.move, this);
    this.events = __bind(this.events, this);
    this.create_navigation = __bind(this.create_navigation, this);
    var data;
    this.events();
    data = this.sample_data();
    this.navigation = this.create_navigation();
    $("#signs").html(this.draw(data.data));
  }

  Start.prototype.create_navigation = function() {
    var del, down, merge, n, split, up,
      _this = this;
    n = $("<div>");
    del = $("<button>", {
      text: "del",
      click: function(e) {
        var to_remove;
        to_remove = $(e.target).parent().parent();
        $("#signs").append(_this.navigation);
        return to_remove.remove();
      }
    });
    up = $("<button>", {
      text: "up",
      click: function(e) {
        var el;
        el = $(e.target).parent().parent();
        return el.after(el.prev());
      }
    });
    down = $("<button>", {
      text: "down",
      click: function(e) {
        var el;
        el = $(e.target).parent().parent();
        return el.before(el.next());
      }
    });
    merge = $("<button>", {
      text: "merge",
      click: function(e) {
        return alert("not implemented");
      }
    });
    split = $("<button>", {
      text: "split",
      click: function(e) {
        return alert("not implemented");
      }
    });
    n.append(del).append(up).append(down).append(merge).append(split);
    return n;
  };

  Start.prototype.events = function() {
    $("#add").on("click", this.add);
    $("#add-group").on("click", this.add_group);
    return $("#signs").on("mousemove", this.move);
  };

  Start.prototype.move = function(event) {
    if ($(event.target).hasClass("sign") && !$(event.target).parent().hasClass("signs_container")) {
      return $(event.target).append(this.navigation);
    }
  };

  Start.prototype.add = function() {
    var n, text, _i, _len, _ref;
    text = $("#entry").val();
    _ref = text.split("\n");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      n = _ref[_i];
      if (n.length === 0) {
        continue;
      }
      $("#signs").children().append(this.create_sign(n));
    }
    return $("#entry").val("");
  };

  Start.prototype.add_group = function() {
    var n, new_el, text, _i, _len, _ref;
    text = $("#entry").val();
    new_el = $("<div>", {
      "class": "sign sign-group"
    });
    _ref = text.split("\n");
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      n = _ref[_i];
      if (n.length === 0) {
        continue;
      }
      new_el.append(this.create_sign(n));
    }
    $("#signs").children().append(new_el);
    return $("#entry").val("");
  };

  Start.prototype.draw = function(data) {
    var d, new_el, _i, _len, _ref;
    if (data.type === "list") {
      new_el = $("<div>", {
        "class": "sign sign-group"
      });
      _ref = data.data;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        d = _ref[_i];
        new_el.append(this.draw(d));
      }
      return new_el;
    } else {
      return this.create_sign(data.text);
    }
  };

  Start.prototype.create_sign = function(text) {
    var new_el;
    new_el = $("<div>", {
      "class": "sign sign-single"
    });
    new_el.text(text);
    return new_el;
  };

  Start.prototype.sample_data = function() {
    var data;
    data = {
      data: {
        type: "list",
        data: [
          {
            type: "sign",
            text: "hello"
          }, {
            type: "sign",
            text: "world"
          }
        ]
      }
    };
    return data;
  };

  return Start;

})();
